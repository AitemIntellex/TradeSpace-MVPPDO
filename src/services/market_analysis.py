from src.trading.ict_strategy import ict_strategy
from src.trading.smc_strategy import smc_strategy
from src.trading.snr_strategy import snr_strategy

from src.indicators.market_helpers import identify_liquidity_zones
from src.indicators.market_structure import identify_market_structure
from src.indicators.technical_indicators import (
    calculate_fibonacci_levels,
    get_indicators_data,
    identify_fvg,
)

from src.utils.mt5_utils import get_ohlc_extended
from src.trading.forex_pair import (
    majors,
    metals,
    cryptocurrencies,
    stocks,
    indices,
    commodities,
)
import json
import MetaTrader5 as mt5

# –¢–∞–π–º—Ñ—Ä–µ–π–º—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º
TIMEFRAME_MAPPING = {
    "1m": mt5.TIMEFRAME_M1,
    "5m": mt5.TIMEFRAME_M5,
    "15m": mt5.TIMEFRAME_M15,
    "1h": mt5.TIMEFRAME_H1,
    "4h": mt5.TIMEFRAME_H4,
    "1d": mt5.TIMEFRAME_D1,
}


def format_dataframe(df):
    """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç DataFrame –≤ JSON-—Å–ø–∏—Å–æ–∫"""
    return df.round(5).to_dict(orient="records")  # –û–∫—Ä—É–≥–ª—è–µ–º –∏ –≤ JSON


def format_dict(data):
    """–û–∫—Ä—É–≥–ª—è–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ"""
    if isinstance(data, dict):
        return {
            k: round(v, 5) if isinstance(v, (int, float)) else v
            for k, v in data.items()
        }
    return data


# –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
AVAILABLE_SYMBOLS = set(
    majors + metals + cryptocurrencies + stocks + indices + commodities
)


def get_market_analysis(symbol, timeframes="all", num_values=100):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–∏–º–≤–æ–ª
    if symbol not in AVAILABLE_SYMBOLS:
        return {"error": f"–°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö!"}

    if timeframes == "all":
        timeframes = list(TIMEFRAME_MAPPING.keys())

    results = {}

    for tf in timeframes:
        # üõ† –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ MT5-—Ñ–æ—Ä–º–∞—Ç
        mt5_timeframe = TIMEFRAME_MAPPING.get(tf.lower(), mt5.TIMEFRAME_M15)

        # üõ† –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º `int`, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É!
        df = get_ohlc_extended(symbol, mt5_timeframe, num_values)

        if df is None or df.empty:
            results[tf] = {"error": f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {tf}"}
            continue

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º OHLC
        ohlc_data = format_dataframe(df)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä—ã–Ω–∫–∞
        market_structure = format_dict(identify_market_structure(symbol, tf))

        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–Ω–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        liquidity_zones = format_dict(identify_liquidity_zones(symbol, tf))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—ã FVG
        fvg_zones = identify_fvg(df)

        # –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏
        fib_levels = format_dict(calculate_fibonacci_levels(symbol, tf))

        # –ë–µ—Ä—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = format_dict(get_indicators_data(symbol, tf, num_values))

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        ict_result = format_dict(ict_strategy(symbol, tf))
        smc_result = format_dict(smc_strategy(symbol, tf))
        snr_result = format_dict(snr_strategy(symbol, tf))

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¢–§
        results[tf] = {
            "ohlc": ohlc_data,
            "market_structure": market_structure,
            "liquidity_zones": liquidity_zones,
            "fvg_zones": fvg_zones,
            "fibonacci": fib_levels,
            "indicators": indicators,
            "strategies": {
                "ICT": ict_result,
                "SMC": smc_result,
                "SNR": snr_result,
            },
        }

    return json.dumps(results, indent=4, ensure_ascii=False)

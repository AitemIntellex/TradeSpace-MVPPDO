import json
import logging
from django.http import HttpRequest, HttpResponse, JsonResponse
from django.shortcuts import render
import MetaTrader5 as mt5

from src.services.market_analysis import get_market_analysis  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä–∫–µ—Ç-–∞–Ω–∞–ª–∏–∑
from src.adviser.new_technical_indicators import get_new_indicators_data
from src.indicators.market_structure import (
    calculate_regression_channel,
    create_instrument_structure,
)
from src.indicators.technical_indicators import (
    analyze_current_price_with_fibonacci,
    calculate_ote,
    calculate_pivot_points,
    find_nearest_levels,
    is_price_in_ote,
)
from src.utils.mt5_connection import initialize_mt5
from src.trading.ict_strategy import ict_strategy
from src.trading.smc_strategy import smc_strategy
from src.trading.snr_strategy import snr_strategy
from src.trading.trading import prepare_fibonacci_levels
from src.utils.mt5_utils import shutdown_mt5
from polygon.views import define_timeframes


def technical_analysis_tas(request: HttpRequest) -> HttpResponse:

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MetaTrader 5
        initialize_mt5()

        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ cookie –∏–ª–∏ GET-–∑–∞–ø—Ä–æ—Å–∞
        symbol_from_cookie = request.COOKIES.get("selected_pair", "XAUUSD")
        symbol = request.GET.get("symbol", symbol_from_cookie)

        timeframes = define_timeframes()
        selected_timeframe = request.GET.get("timeframe", "15m")
        timeframe = timeframes.get(selected_timeframe, mt5.TIMEFRAME_M15)
        selected_candles = int(request.GET.get("candles", 5))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–≤–µ—á–µ–π
        candles = selected_candles

        # üî• –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ç-–∞–Ω–∞–ª–∏–∑–∞ (–∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º)
        market_analysis = get_market_analysis(
            symbol, [selected_timeframe], num_values=candles
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators = get_new_indicators_data(symbol, timeframe, num_values=candles)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π Pivot Points
        pivot_points = calculate_pivot_points(symbol, timeframe, num_values=candles)

        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        ict_data = ict_strategy(symbol, timeframe)
        smc_data = smc_strategy(symbol, timeframe)
        snr_data = snr_strategy(symbol, timeframe)

        # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π –§–∏–±–æ–Ω–∞—á—á–∏
        fib_data = prepare_fibonacci_levels(symbol, timeframe)
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        instrument_structure = create_instrument_structure(symbol, timeframe)
        regression_channel = calculate_regression_channel(symbol, timeframe)
        # –†–∞—Å—á–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        current_price = instrument_structure.get("current_price")
        nearest_levels = find_nearest_levels(fib_data, current_price)
        fib_analysis = analyze_current_price_with_fibonacci(
            high=instrument_structure["ohlc"][-1]["high"],  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞–∫—Å–∏–º—É–º
            low=instrument_structure["ohlc"][-1]["low"],  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∏–Ω–∏–º—É–º
            close=instrument_structure["ohlc"][-1]["close"],  # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            current_price=instrument_structure["current_price"],  # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            start_time=instrument_structure["ohlc"][0]["time"],  # –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞
            end_time=instrument_structure["ohlc"][-1]["time"],  # –ö–æ–Ω–µ—Ü –∞–Ω–∞–ª–∏–∑–∞
        )
        # –†–∞—Å—á–µ—Ç OTE
        ote_analysis = calculate_ote(
            symbol=symbol,
            timeframe=timeframe,
            trend=instrument_structure["trend"],
            bars=500,
            local_bars=128,
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≤ –∑–æ–Ω–µ OTE
        is_in_ote = (
            is_price_in_ote(
                price=instrument_structure["current_price"],
                ote_levels=ote_analysis["ote_levels"],
            )
            if ote_analysis
            else False
        )

        # –ü—Ä–∏–≤–æ–¥–∏–º Timestamp –∫ —Å—Ç—Ä–æ–∫–µ
        for bar in instrument_structure["ohlc"]:
            bar["time"] = bar["time"].isoformat()

        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤—Ä—É—á–Ω—É—é
        ohlc_json = json.dumps(instrument_structure["ohlc"])

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ç-–∞–Ω–∞–ª–∏–∑)
        context = {
            "symbol": symbol,
            "timeframes": list(timeframes.keys()),
            "selected_timeframe": selected_timeframe,
            "selected_candles": selected_candles,
            "indicators": indicators,
            "pivot_points": pivot_points,
            "ict_strategy": ict_data,
            "smc_strategy": smc_data,
            "snr_strategy": snr_data,
            "fibonacci_levels": fib_data,
            "instrument_structure": instrument_structure,
            "regression_channel": regression_channel,
            "nearest_levels": nearest_levels,  # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏
            "fib_analysis": fib_analysis,
            "ote_analysis": ote_analysis,
            "is_in_ote": is_in_ote,
            "ohlc_data": instrument_structure["ohlc"],  # —Å–ø–∏—Å–æ–∫ OHLC
            "ohlc_json": ohlc_json,
            "market_analysis": market_analysis,  # üî• –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ç-–∞–Ω–∞–ª–∏–∑
        }

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –¥–ª—è AJAX-–∑–∞–ø—Ä–æ—Å–æ–≤
        if request.headers.get("x-requested-with") == "XMLHttpRequest":
            return JsonResponse(context)

        # HTML-–æ—Ç–≤–µ—Ç
        response = render(request, "technical_analysis/tas1.html", context)
        response.set_cookie("selected_timeframe", selected_timeframe)
        return response

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ ...: {e}")
        return JsonResponse({"error": str(e)}, status=500)

    finally:
        shutdown_mt5()


from src.services.market_analysis import get_market_analysis


def market_analysis_view(request):
    symbol = request.GET.get("symbol", "XAUUSD").strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    timeframes = request.GET.getlist("timeframes")

    if "all" in timeframes:
        timeframes = "all"  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ "all", –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å—ë

    print(f"üõ† DEBUG: –°–∏–º–≤–æ–ª {symbol}, —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã {timeframes}")  # –û—Ç–ª–∞–¥–∫–∞

    analysis = get_market_analysis(symbol, timeframes)
    return JsonResponse(analysis, safe=False)

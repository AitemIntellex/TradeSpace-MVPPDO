import MetaTrader5 as mt5
import pandas as pd
import logging
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any, Generator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

# ------------------------------ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è MT5 ------------------------------


def initialize_mt5():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç MetaTrader 5, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã.
    """
    if not mt5.initialize():
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MetaTrader 5")

    account_info = mt5.account_info()
    if account_info is None:
        raise Exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω."
        )

    print(
        f"‚úÖ MT5 –ø–æ–¥–∫–ª—é—á—ë–Ω. –ê–∫–∫–∞—É–Ω—Ç: {account_info.login}, –ë–∞–ª–∞–Ω—Å: {account_info.balance}"
    )
    print(mt5.terminal_info())  # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –≥–¥–µ –ª–µ–∂–∏—Ç exe –∏ —Ç.–¥.
    print(mt5.account_info())


def ensure_symbol_is_selected(symbol: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —Å–∏–º–≤–æ–ª –≤ Market Watch, –∏ –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –µ–≥–æ.
    """
    if not mt5.symbol_select(symbol, True):
        raise Exception(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–∏–º–≤–æ–ª {symbol}. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Market Watch."
        )


class MT5Connector:
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å MetaTrader 5.
    """

    def __enter__(self) -> "MT5Connector":
        if not mt5.initialize():
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MetaTrader 5")
        logging.info("MetaTrader 5 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return self

    def __exit__(self, exc_type, exc_value, traceback) -> None:
        mt5.shutdown()
        logging.info("MetaTrader 5 –æ—Ç–∫–ª—é—á–µ–Ω")


# ------------------------------ –§—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º ------------------------------


def connect_mt5(account: Any) -> bool:
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ MT5 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞.
    """
    try:
        with MT5Connector():
            if not mt5.login(account.login, account.password, server=account.server):
                raise ConnectionError(
                    f"MetaTrader 5: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {account.name}"
                )
            logging.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è {account.name}")
            return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


# ------------------------------ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ------------------------------

import MetaTrader5 as mt5

# üõ† –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –≤ —á–∏—Å–ª–∞ –¥–ª—è MT5
TIMEFRAME_MAPPING = {
    "1m": mt5.TIMEFRAME_M1,
    "5m": mt5.TIMEFRAME_M5,
    "15m": mt5.TIMEFRAME_M15,
    "30m": mt5.TIMEFRAME_M30,
    "1h": mt5.TIMEFRAME_H1,
    "4h": mt5.TIMEFRAME_H4,
    "1d": mt5.TIMEFRAME_D1,
    "1w": mt5.TIMEFRAME_W1,
}


def convert_timeframe(timeframe_str):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º (M15, H1 –∏ —Ç. –¥.) –≤ —Ñ–æ—Ä–º–∞—Ç MetaTrader 5.
    """
    return TIMEFRAME_MAPPING.get(timeframe_str, None)


# def get_rates_dataframe(symbol: str, timeframe: str, num_candles: int):
#     """
#     –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ MetaTrader 5.
#     """
#     mt5_timeframe = convert_timeframe(timeframe)

#     if mt5_timeframe is None:
#         raise ValueError(
#             f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {timeframe}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ M1, M5, M15, H1 –∏ —Ç. –¥."
#         )

#     # –í—ã–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–¥ copy_rates_from_pos
#     if not mt5.symbol_select(symbol, True):
#         raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª {symbol} –≤ Market Watch.")

#     rates = mt5.copy_rates_from_pos(symbol, mt5_timeframe, 0, num_candles)

#     if rates is None or len(rates) == 0:
#         err_code, err_desc = last_error()
#         logging.error(f"–û—à–∏–±–∫–∞ {err_code}: {err_desc}")
#         raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} {timeframe}")


#     return pd.DataFrame(rates)
def get_rates_dataframe(symbol: str, timeframe: str, num_candles: int):
    print(f"‚ö°Ô∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º {num_candles} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} ({timeframe})")

    # üõ† –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ int
    mt5_timeframe = TIMEFRAME_MAPPING.get(timeframe)
    if mt5_timeframe is None:
        raise ValueError(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {timeframe}")

    rates = mt5.copy_rates_from_pos(symbol, mt5_timeframe, 0, num_candles)

    if rates is None:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} ({timeframe})")
        return None

    df = pd.DataFrame(rates)
    df["time"] = pd.to_datetime(df["time"], unit="s")
    return df


def get_trade_history(
    start_date: Optional[datetime] = None, end_date: Optional[datetime] = None
) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    """
    start_date = start_date or datetime(2000, 1, 1)
    end_date = end_date or datetime.now()
    try:
        with MT5Connector():
            deals = mt5.history_deals_get(start_date, end_date)
            if deals is None:
                raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–¥–µ–ª–∫–∏: {mt5.last_error()}")
            return [
                {
                    "time": deal.time,
                    "symbol": deal.symbol,
                    "profit": deal.profit,
                    "volume": deal.volume,
                    "price": deal.price,
                }
                for deal in deals
            ]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []


# ------------------------------ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ------------------------------


def open_position(symbol: str, volume: float, direction: str, count: int = 1) -> bool:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É.
    """
    try:
        with MT5Connector():
            for _ in range(count):
                tick = mt5.symbol_info_tick(symbol)
                if not tick:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}")
                price = tick.ask if direction == "buy" else tick.bid
                order_type = (
                    mt5.ORDER_TYPE_BUY if direction == "buy" else mt5.ORDER_TYPE_SELL
                )
                request = {
                    "action": mt5.TRADE_ACTION_DEAL,
                    "symbol": symbol,
                    "volume": volume,
                    "type": order_type,
                    "price": price,
                    "deviation": 20,
                    "magic": 123456,
                    "comment": f"Automated Open: {direction.upper()}",
                }
                result = mt5.order_send(request)
                if result.retcode != mt5.TRADE_RETCODE_DONE:
                    raise Exception(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {result.retcode}"
                    )
                logging.info(
                    f"–ü–æ–∑–∏—Ü–∏—è {direction.upper()} –¥–ª—è {symbol} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞."
                )
            return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {e}")
        return False


def close_position(ticket: int) -> bool:
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–∏–∫–µ—Ç—É.
    """
    try:
        with MT5Connector():
            positions = mt5.positions_get(ticket=ticket)
            if not positions:
                raise Exception(f"–ü–æ–∑–∏—Ü–∏—è —Å —Ç–∏–∫–µ—Ç–æ–º {ticket} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            position = positions[0]
            symbol = position.symbol
            volume = position.volume
            tick = mt5.symbol_info_tick(symbol)
            if not tick:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}")
            price = tick.bid if position.type == mt5.ORDER_TYPE_BUY else tick.ask
            close_order = mt5.order_send(
                action=mt5.TRADE_ACTION_DEAL,
                symbol=symbol,
                volume=volume,
                type=(
                    mt5.ORDER_TYPE_SELL
                    if position.type == mt5.ORDER_TYPE_BUY
                    else mt5.ORDER_TYPE_BUY
                ),
                position=ticket,
                price=price,
                deviation=100,
                magic=123456,
                comment="Automated Close",
            )
            if close_order.retcode != mt5.TRADE_RETCODE_DONE:
                logging.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {ticket}: –∫–æ–¥ {close_order.retcode}"
                )
                return False
            logging.info(f"–ü–æ–∑–∏—Ü–∏—è {ticket} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.")
            return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {ticket}: {e}")
        return False


# ------------------------------ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ------------------------------

if __name__ == "__main__":
    try:
        with MT5Connector():
            # –ü—Ä–∏–º–µ—Ä: –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            symbol = "EURUSD"
            tick = mt5.symbol_info_tick(symbol)
            if tick:
                logging.info(
                    f"–¢–µ–∫—É—â–∏–π —Ç–∏–∫ –¥–ª—è {symbol}: Ask={tick.ask}, Bid={tick.bid}"
                )
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫ –¥–ª—è {symbol}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ: {e}")
